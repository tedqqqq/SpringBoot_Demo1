
package com.test.openmeetings.roomservice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.3.5
 * 2020-02-23T15:06:02.502+08:00
 * Generated source version: 3.3.5
 *
 */
public final class RoomWebService_RoomWebServicePort_Client {

    private static final QName SERVICE_NAME = new QName("http://webservice.openmeetings.apache.org/", "org.apache.openmeetings.webservice.RoomWebService");

    private RoomWebService_RoomWebServicePort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = OrgApacheOpenmeetingsWebserviceRoomWebService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }

        OrgApacheOpenmeetingsWebserviceRoomWebService ss = new OrgApacheOpenmeetingsWebserviceRoomWebService(wsdlURL, SERVICE_NAME);
        RoomWebService port = ss.getRoomWebServicePort();

        {
        System.out.println("Invoking add...");
        java.lang.String _add_sid = "";
        com.test.openmeetings.roomservice.RoomDTO _add_room = null;
        com.test.openmeetings.roomservice.RoomDTO _add__return = port.add(_add_sid, _add_room);
        System.out.println("add.result=" + _add__return);


        }
        {
        System.out.println("Invoking cleanWb...");
        java.lang.String _cleanWb_sid = "";
        long _cleanWb_id = 0;
        com.test.openmeetings.roomservice.ServiceResult _cleanWb__return = port.cleanWb(_cleanWb_sid, _cleanWb_id);
        System.out.println("cleanWb.result=" + _cleanWb__return);


        }
        {
        System.out.println("Invoking getPublic...");
        java.lang.String _getPublic_sid = "";
        java.lang.String _getPublic_type = "";
        java.util.List<com.test.openmeetings.roomservice.RoomDTO> _getPublic__return = port.getPublic(_getPublic_sid, _getPublic_type);
        System.out.println("getPublic.result=" + _getPublic__return);


        }
        {
        System.out.println("Invoking count...");
        java.lang.String _count_sid = "";
        java.lang.Long _count_roomid = null;
        com.test.openmeetings.roomservice.ServiceResult _count__return = port.count(_count_sid, _count_roomid);
        System.out.println("count.result=" + _count__return);


        }
        {
        System.out.println("Invoking users...");
        java.lang.String _users_sid = "";
        java.lang.Long _users_roomid = null;
        java.util.List<com.test.openmeetings.roomservice.UserDTO> _users__return = port.users(_users_sid, _users_roomid);
        System.out.println("users.result=" + _users__return);


        }
        {
        System.out.println("Invoking delete...");
        java.lang.String _delete_sid = "";
        long _delete_id = 0;
        com.test.openmeetings.roomservice.ServiceResult _delete__return = port.delete(_delete_sid, _delete_id);
        System.out.println("delete.result=" + _delete__return);


        }
        {
        System.out.println("Invoking getExternal...");
        java.lang.String _getExternal_sid = "";
        java.lang.String _getExternal_type = "";
        java.lang.String _getExternal_externaltype = "";
        java.lang.String _getExternal_externalid = "";
        com.test.openmeetings.roomservice.RoomDTO _getExternal_room = null;
        com.test.openmeetings.roomservice.RoomDTO _getExternal__return = port.getExternal(_getExternal_sid, _getExternal_type, _getExternal_externaltype, _getExternal_externalid, _getExternal_room);
        System.out.println("getExternal.result=" + _getExternal__return);


        }
        {
        System.out.println("Invoking kickAll...");
        java.lang.String _kickAll_sid = "";
        long _kickAll_id = 0;
        com.test.openmeetings.roomservice.ServiceResult _kickAll__return = port.kickAll(_kickAll_sid, _kickAll_id);
        System.out.println("kickAll.result=" + _kickAll__return);


        }
        {
        System.out.println("Invoking kick...");
        java.lang.String _kick_sid = "";
        long _kick_id = 0;
        java.lang.String _kick_externalType = "";
        java.lang.String _kick_externalId = "";
        com.test.openmeetings.roomservice.ServiceResult _kick__return = port.kick(_kick_sid, _kick_id, _kick_externalType, _kick_externalId);
        System.out.println("kick.result=" + _kick__return);


        }
        {
        System.out.println("Invoking getRoomById...");
        java.lang.String _getRoomById_sid = "";
        java.lang.Long _getRoomById_id = null;
        com.test.openmeetings.roomservice.RoomDTO _getRoomById__return = port.getRoomById(_getRoomById_sid, _getRoomById_id);
        System.out.println("getRoomById.result=" + _getRoomById__return);


        }
        {
        System.out.println("Invoking hash...");
        java.lang.String _hash_sid = "";
        com.test.openmeetings.roomservice.InvitationDTO _hash_invite = null;
        boolean _hash_sendmail = false;
        com.test.openmeetings.roomservice.ServiceResult _hash__return = port.hash(_hash_sid, _hash_invite, _hash_sendmail);
        System.out.println("hash.result=" + _hash__return);


        }
        {
        System.out.println("Invoking open...");
        java.lang.String _open_sid = "";
        long _open_id = 0;
        com.test.openmeetings.roomservice.ServiceResult _open__return = port.open(_open_sid, _open_id);
        System.out.println("open.result=" + _open__return);


        }
        {
        System.out.println("Invoking close...");
        java.lang.String _close_sid = "";
        long _close_id = 0;
        com.test.openmeetings.roomservice.ServiceResult _close__return = port.close(_close_sid, _close_id);
        System.out.println("close.result=" + _close__return);


        }

        System.exit(0);
    }

}
